/*!
One-line description.

More detailed description, with

# Example

*/

// use ...

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

use std::env::var;
use std::path::PathBuf;
use std::process::Command;

pub fn editor_command() -> String {
    match (var("VISUAL"), var("EDITOR")) {
        (Ok(cmd), _) => cmd,
        (Err(_), Ok(cmd)) => cmd,
        (_, _) => "vi".to_string(),
    }
}

pub fn run_editor(file_path: &PathBuf) {
    let editor = editor_command();
    if let Ok(status) = Command::new(editor).arg(file_path).status() {
        if !status.success() {
            eprintln!("Editor reported error opening {:?}", file_path);
        }
    } else {
        eprintln!("Could not start editor for file {:?}", file_path);
    }
}

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
